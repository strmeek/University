# -*- coding: utf-8 -*-
"""Pares e impares e+.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1822cbeo_B1LA8GoaIuE2bIDDZIHYINes
"""

#ex1 p5#
par = int(input('Número desejado: '))

def num(par):
  if((par % 2) == 0):
    print("é par")
  else:
    print("é impar")
  return

num(par)

par = int(input('Número desejado: '))

def num(par):
  x = par % 2
  return x

num(par)

import random as rd

elem = int(input("Número de Elementos - "))

def ale(i):
  lista = []
  for f in range(elem):
    i = rd.randint(0,elem)
    lista.append(i)
  return lista

x = ale(elem)
print(x)
print("Menor Número: %d" %(min(x)))
print("Maior Número: %d" %(max(x)))

b = float(input("Base do Triângulo: "))
h = float(input("Altura do Triângulo: "))

def area(b,h):
  x = (b*h)/2
  print("Área do Triângulo: %.2f" %x)
  return
area(b,h)

import numpy as np

x = float(input("Valor Real: "))

def f(x):
  y = x**3 - np.cos(x)
  print(y)
  return

f(x)

import matplotlib.pyplot as graph
import numpy as np

elem = int(input("Número de pontos - "))
x = np.linspace(-3,3,elem)

def f(x):
  y = x**2 - np.cos(x)
  return y

print(graph.plot(x,f(x)))

import matplotlib.pyplot as graph
import numpy as np

x = np.linspace(-3,3,1000)

def f(x):
  y = x**2 - np.cos(x)
  return y

print(graph.plot(x,f(x)))

import numpy as np

n_coord = int(input("Número de Coordenadas do vetor = "))

def v(x):
  vetor = []
  for i in range(n_coord):
    x = float(input("x%d = " %i))
    vetor.append(x)
  return x
y = v(n_coord)
print(vetor)