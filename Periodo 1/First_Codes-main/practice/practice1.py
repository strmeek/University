# -*- coding: utf-8 -*-
"""otimização.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vIxc-ct4-zPTPLZaW-V9MO6FgXZ958yg
"""

####Corrida de Kart
####Funcionalidades:
#Nomes:
def name(line):
  names = []
  for k in range(line):
    pilot = str(input("Nome do piloto %d:  " %(k + 1)))
    names.append(pilot)
  return names

#Tempos dos corredores:
import random as rd

def laps(column):
  matrix = [0] * line
  for j in range(line):
    times = []
    for i in range(column):
      lap = rd.randint(120,180)
      times.append(lap)
    matrix[j] = times
  return matrix

####Organização:
line = int(input("Número de pilotos: "))
column = int(input("Número de voltas da corrida: "))

nomes = name(line)
matriz = laps(column)

#Todos os resultados:

best = []
media = []
for a in range(line):
  best.append(min(matriz[a]))
  media.append((sum(matriz[a]))/column)
  print(nomes[a],matriz[a], "média %.2f" %media[a], "melhor tempo %d" %best[a])

verybest = min(best)
bestmedia = min(media)

print('\n'"melhor tempo da corrida", verybest, "feito pelo piloto", nomes[best.index(verybest)])
print("melhor média da corrida %.2f" %bestmedia, "feito pelo piloto", nomes[media.index(bestmedia)])

#lista 5:
def soma_matrizes(A,B):
  #verificar se as matrizes possuem a mesma dimensão
   linhas_A = len(A)
   colunas_A = len(A[0])
   linhas_B = len(B)
   colunas_B = len(B[0])
   
   if( (linhas_A == linhas_B) and (colunas_A==colunas_B) ):
     #calculando a soma
     C =[]
     for i in range(linhas_A):
       linha = [0]*colunas_A
       C.append(linha)
       for j in range(colunas_A):
         C[i][j] = A[i][j] + B[i][j]
   else:
     print("As matrizes possuem dimensões diferentes")
   return C

def media_matriz(A):
  media = []
  for i in range(len(A)):
    x = (sum(A[i]))/len(A)
    media.append(x)
  return (sum(media))/len(media)

def soma_diagonal(A):
  linhas_A = len(A)
  colunas_A = len(A[0])
  if linhas_A == colunas_A:
    diagonal = []
    for i in range(len(A)):
      x = A[i][i]
      diagonal.append(x)
    return sum(diagonal)

def timesfive(A):
  C = [0] * len(A)
  for i in range(len(A)):
    aux = []
    for j in range(len(A[0])):
      x = 5 * A[i][j]
      aux.append(x)
    C[i] = aux
  return C

A =[[1.0, 1.0, 1.0],[1.0, 1.0, 1.0],[1.0, 1.0, 1.0]]
B =[[1.0, 11.0, 5.0],[-3.0, 0.5, 8.0],[17.0, 0.0, 3.0]]

soma = soma_matrizes(A,B)
media = media_matriz(A)
diagonal = soma_diagonal(A)
timesfive = timesfive(A)
print(soma,'\n',media,'\n',diagonal,'\n',timesfive)

#menor idade
tabela = [ [10, "Ana"],
          [15 , "Lucas"],
          [13 , "Bia"],
          [24 , "Larissa"],
          [21 , "Leo"],
          [32 , "Bruno"],
          [4 , "Cássio"],
          [8 , "Jonas"],
          [23 , "Lauro"],
          [18 , "Mateus"] ]
tabela.sort()
print(tabela[0][1], "de", tabela[0][0], "anos de idade")